// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package biz is a generated GoMock package.
package biz

import (
	reflect "reflect"

	contextx "github.com/blackhorseya/irent/pkg/contextx"
	model "github.com/blackhorseya/irent/pkg/entity/domain/rental/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIBiz is a mock of IBiz interface.
type MockIBiz struct {
	ctrl     *gomock.Controller
	recorder *MockIBizMockRecorder
}

// MockIBizMockRecorder is the mock recorder for MockIBiz.
type MockIBizMockRecorder struct {
	mock *MockIBiz
}

// NewMockIBiz creates a new mock instance.
func NewMockIBiz(ctrl *gomock.Controller) *MockIBiz {
	mock := &MockIBiz{ctrl: ctrl}
	mock.recorder = &MockIBizMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBiz) EXPECT() *MockIBizMockRecorder {
	return m.recorder
}

// ListCars mocks base method.
func (m *MockIBiz) ListCars(ctx contextx.Contextx, condition QueryCarCondition) ([]*model.Car, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCars", ctx, condition)
	ret0, _ := ret[0].([]*model.Car)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCars indicates an expected call of ListCars.
func (mr *MockIBizMockRecorder) ListCars(ctx, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCars", reflect.TypeOf((*MockIBiz)(nil).ListCars), ctx, condition)
}

// Liveness mocks base method.
func (m *MockIBiz) Liveness(ctx contextx.Contextx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Liveness", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Liveness indicates an expected call of Liveness.
func (mr *MockIBizMockRecorder) Liveness(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Liveness", reflect.TypeOf((*MockIBiz)(nil).Liveness), ctx)
}

// Readiness mocks base method.
func (m *MockIBiz) Readiness(ctx contextx.Contextx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Readiness", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Readiness indicates an expected call of Readiness.
func (mr *MockIBizMockRecorder) Readiness(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readiness", reflect.TypeOf((*MockIBiz)(nil).Readiness), ctx)
}

// UpdateInfoCars mocks base method.
func (m *MockIBiz) UpdateInfoCars(ctx contextx.Contextx) ([]*model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInfoCars", ctx)
	ret0, _ := ret[0].([]*model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInfoCars indicates an expected call of UpdateInfoCars.
func (mr *MockIBizMockRecorder) UpdateInfoCars(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInfoCars", reflect.TypeOf((*MockIBiz)(nil).UpdateInfoCars), ctx)
}
