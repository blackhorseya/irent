// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package biz is a generated GoMock package.
package biz

import (
	reflect "reflect"

	contextx "github.com/blackhorseya/irent/pkg/contextx"
	model "github.com/blackhorseya/irent/pkg/entity/domain/account/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIBiz is a mock of IBiz interface.
type MockIBiz struct {
	ctrl     *gomock.Controller
	recorder *MockIBizMockRecorder
}

// MockIBizMockRecorder is the mock recorder for MockIBiz.
type MockIBizMockRecorder struct {
	mock *MockIBiz
}

// NewMockIBiz creates a new mock instance.
func NewMockIBiz(ctrl *gomock.Controller) *MockIBiz {
	mock := &MockIBiz{ctrl: ctrl}
	mock.recorder = &MockIBizMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBiz) EXPECT() *MockIBizMockRecorder {
	return m.recorder
}

// GetByAccessToken mocks base method.
func (m *MockIBiz) GetByAccessToken(ctx contextx.Contextx, token string) (*model.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAccessToken", ctx, token)
	ret0, _ := ret[0].(*model.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAccessToken indicates an expected call of GetByAccessToken.
func (mr *MockIBizMockRecorder) GetByAccessToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAccessToken", reflect.TypeOf((*MockIBiz)(nil).GetByAccessToken), ctx, token)
}

// Liveness mocks base method.
func (m *MockIBiz) Liveness(ctx contextx.Contextx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Liveness", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Liveness indicates an expected call of Liveness.
func (mr *MockIBizMockRecorder) Liveness(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Liveness", reflect.TypeOf((*MockIBiz)(nil).Liveness), ctx)
}

// Login mocks base method.
func (m *MockIBiz) Login(ctx contextx.Contextx, id, password string) (*model.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, id, password)
	ret0, _ := ret[0].(*model.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockIBizMockRecorder) Login(ctx, id, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIBiz)(nil).Login), ctx, id, password)
}

// Readiness mocks base method.
func (m *MockIBiz) Readiness(ctx contextx.Contextx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Readiness", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Readiness indicates an expected call of Readiness.
func (mr *MockIBizMockRecorder) Readiness(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readiness", reflect.TypeOf((*MockIBiz)(nil).Readiness), ctx)
}
