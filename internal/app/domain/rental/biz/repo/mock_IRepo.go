// Code generated by mockery v2.16.0. DO NOT EDIT.

package repo

import (
	contextx "github.com/blackhorseya/irent/pkg/contextx"
	mock "github.com/stretchr/testify/mock"

	model "github.com/blackhorseya/irent/pkg/entity/domain/rental/model"
)

// MockIRepo is an autogenerated mock type for the IRepo type
type MockIRepo struct {
	mock.Mock
}

// FetchAvailableCars provides a mock function with given fields: ctx
func (_m *MockIRepo) FetchAvailableCars(ctx contextx.Contextx) ([]*model.Car, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Car
	if rf, ok := ret.Get(0).(func(contextx.Contextx) []*model.Car); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Car)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCars provides a mock function with given fields: ctx
func (_m *MockIRepo) ListCars(ctx contextx.Contextx) ([]*model.Car, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Car
	if rf, ok := ret.Get(0).(func(contextx.Contextx) []*model.Car); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Car)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockIRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIRepo creates a new instance of MockIRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIRepo(t mockConstructorTestingTNewMockIRepo) *MockIRepo {
	mock := &MockIRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
