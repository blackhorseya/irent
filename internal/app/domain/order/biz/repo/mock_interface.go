// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package repo is a generated GoMock package.
package repo

import (
	reflect "reflect"

	contextx "github.com/blackhorseya/irent/pkg/contextx"
	model "github.com/blackhorseya/irent/pkg/entity/domain/account/model"
	model0 "github.com/blackhorseya/irent/pkg/entity/domain/order/model"
	model1 "github.com/blackhorseya/irent/pkg/entity/domain/rental/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIRepo is a mock of IRepo interface.
type MockIRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRepoMockRecorder
}

// MockIRepoMockRecorder is the mock recorder for MockIRepo.
type MockIRepoMockRecorder struct {
	mock *MockIRepo
}

// NewMockIRepo creates a new mock instance.
func NewMockIRepo(ctrl *gomock.Controller) *MockIRepo {
	mock := &MockIRepo{ctrl: ctrl}
	mock.recorder = &MockIRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepo) EXPECT() *MockIRepoMockRecorder {
	return m.recorder
}

// BookCar mocks base method.
func (m *MockIRepo) BookCar(ctx contextx.Contextx, from *model.Profile, target *model1.Car) (*model0.Lease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookCar", ctx, from, target)
	ret0, _ := ret[0].(*model0.Lease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookCar indicates an expected call of BookCar.
func (mr *MockIRepoMockRecorder) BookCar(ctx, from, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookCar", reflect.TypeOf((*MockIRepo)(nil).BookCar), ctx, from, target)
}

// CancelBooking mocks base method.
func (m *MockIRepo) CancelBooking(ctx contextx.Contextx, from *model.Profile, target *model0.Lease) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelBooking", ctx, from, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelBooking indicates an expected call of CancelBooking.
func (mr *MockIRepoMockRecorder) CancelBooking(ctx, from, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBooking", reflect.TypeOf((*MockIRepo)(nil).CancelBooking), ctx, from, target)
}

// FetchArrears mocks base method.
func (m *MockIRepo) FetchArrears(ctx contextx.Contextx, from, target *model.Profile) ([]*model0.ArrearsRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchArrears", ctx, from, target)
	ret0, _ := ret[0].([]*model0.ArrearsRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchArrears indicates an expected call of FetchArrears.
func (mr *MockIRepoMockRecorder) FetchArrears(ctx, from, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchArrears", reflect.TypeOf((*MockIRepo)(nil).FetchArrears), ctx, from, target)
}

// QueryBookings mocks base method.
func (m *MockIRepo) QueryBookings(ctx contextx.Contextx, from *model.Profile) ([]*model0.Lease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBookings", ctx, from)
	ret0, _ := ret[0].([]*model0.Lease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBookings indicates an expected call of QueryBookings.
func (mr *MockIRepoMockRecorder) QueryBookings(ctx, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBookings", reflect.TypeOf((*MockIRepo)(nil).QueryBookings), ctx, from)
}
